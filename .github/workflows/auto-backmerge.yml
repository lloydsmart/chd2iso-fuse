name: Auto-merge back-merge PRs (main → develop)

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review, labeled]
    branches: [ develop ]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-merge:
    name: Auto-merge if clean (main → develop)
    # Only act on PRs from main -> develop, created by the Actions bot
    if: >
      github.event.pull_request.base.ref == 'develop' &&
      github.event.pull_request.head.ref == 'main' &&
      github.event.pull_request.user.login == 'github-actions[bot]'
    runs-on: ubuntu-latest

    steps:
      - name: Show PR context
        run: |
          echo "PR #${{ github.event.pull_request.number }}"
          echo "head: ${{ github.event.pull_request.head.ref }}"
          echo "base: ${{ github.event.pull_request.base.ref }}"
          echo "author: ${{ github.event.pull_request.user.login }}"

      # Try native GitHub Auto-merge first (best UX; GitHub merges when all checks pass)
      - name: Try enabling native Auto-merge (MERGE)
        id: enable_auto_merge
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            // Native auto-merge requires the repo setting "Allow auto-merge"
            // If it's off, this will fail and we'll fall back to manual logic.
            const prNodeId = context.payload.pull_request.node_id;
            const result = await github.graphql(`
              mutation($prId: ID!, $method: PullRequestMergeMethod!) {
                enablePullRequestAutoMerge(input: {
                  pullRequestId: $prId,
                  mergeMethod: $method
                }) { clientMutationId }
              }
            `, { prId: prNodeId, method: "MERGE" });
            core.info("Auto-merge enabled via GraphQL.");
            return result;

      # If Auto-merge couldn't be enabled (repo setting off), poll until clean and mergeable, then merge.
      - name: Fallback: wait until PR is clean & mergeable
        id: wait_clean
        if: steps.enable_auto_merge.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            // Poll for up to ~10 minutes (30 * 20s) until mergeable_state is 'clean' and checks are successful
            const maxAttempts = 30;
            const sleep = ms => new Promise(r => setTimeout(r, ms));

            for (let i = 1; i <= maxAttempts; i++) {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              core.info(`Attempt ${i}: mergeable=${pr.mergeable} state=${pr.mergeable_state} draft=${pr.draft}`);

              // Short-circuit if draft or in conflict
              if (pr.draft) { core.setFailed("PR is draft; not merging."); return; }
              if (pr.mergeable === false || pr.mergeable_state === 'dirty') {
                core.setFailed("PR has conflicts; not merging."); return;
              }

              // Verify required checks (if any) are green
              const sha = pr.head.sha;
              const checks = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: sha,
                per_page: 100
              });
              const allCheckRunsOK = checks.data.check_runs.every(cr =>
                ['success','neutral','skipped'].includes(cr.conclusion || '')
              );

              // Older "Statuses" API for completeness
              const statuses = await github.rest.repos.getCombinedStatusForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: sha
              });
              const statusesOK = statuses.data.state === 'success' || statuses.data.state === 'none';

              // If mergeable_state === 'clean' and checks look good, proceed
              if ((pr.mergeable === true || pr.mergeable_state === 'clean') && allCheckRunsOK && statusesOK) {
                core.info("PR appears mergeable with all checks passing.");
                core.setOutput("ok", "true");
                return;
              }

              // Keep waiting while GitHub computes mergeability or checks are still running
              await sleep(20000);
            }

            core.setFailed("Timed out waiting for PR to become clean & mergeable.");

      - name: Fallback: merge the PR
        if: steps.enable_auto_merge.outcome == 'failure' && steps.wait_clean.outputs.ok == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            // Use a regular merge commit (change to 'squash' or 'rebase' if preferred)
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: 'merge',
              commit_title: pr.title,
              commit_message: `Auto-merged clean back-merge PR #${prNumber} (main → develop)`
            });

            core.info(`Merged PR #${prNumber} (main → develop).`)

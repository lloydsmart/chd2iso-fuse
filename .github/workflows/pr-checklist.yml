name: Reusable — Update PR checklist ☑️

on:
  workflow_call:
    inputs:
      items:
        description: "Checklist items to tick (one per line, must match PR body text)"
        type: string
        required: true
      comment:
        description: "Optional comment to post after updating checklist"
        type: string
        default: ""
      remove_label:
        description: "Optional label to remove after updating checklist"
        type: string
        default: ""
      ready:
        description: "Set PR draft=false (Ready for review) after update"
        type: boolean
        default: false

permissions:
  contents: read
  pull-requests: write

jobs:
  update:
    name: Tick checklist & update PR
    runs-on: ubuntu-latest
    steps:
      - name: ☑️ Update PR checklist
        uses: actions/github-script@v8
        with:
          script: |
            function escapeRegex(s){return s.replace(/[.*+?^${}()|[\]\\]/g,'\\$&')}
            const { owner, repo } = context.repo;
            const head = (context.ref || '').replace('refs/heads/', '');
            if (!head) { core.info('No branch ref; skipping'); return; }

            // Only operate for release/* or hotfix/* (safety guard); adjust if you like
            if (!/^release\/|^hotfix\//.test(head)) {
              core.info(`Branch '${head}' is not release/* or hotfix/*; skipping.`);
              return;
            }

            const prs = await github.paginate(
              github.rest.pulls.list,
              { owner, repo, state: 'open', head: `${owner}:${head}` }
            );
            if (!prs.length) { core.info(`No open PR for ${owner}:${head}`); return; }
            const pr = prs[0];

            const rawItems = `{{ inputs.items }}`;
            const items = rawItems.split(/\r?\n/).map(s => s.trim()).filter(Boolean);

            let body = pr.body || '';
            let changed = false;

            for (const label of items){
              const unchecked = new RegExp(`(^|\\n)\\s*- \\[ \\] \\s*${escapeRegex(label)}(\\s*$)`, 'i');
              const checked   = new RegExp(`(^|\\n)\\s*- \\[x\\] \\s*${escapeRegex(label)}(\\s*$)`, 'i');
              if (checked.test(body)) continue;
              if (unchecked.test(body)) {
                body = body.replace(unchecked, (_m,p1,p2)=>`${p1}- [x] ${label}${p2}`);
                changed = true;
              }
            }

            if (changed){
              await github.rest.pulls.update({ owner, repo, pull_number: pr.number, body });
              core.info(`Updated checklist on PR #${pr.number}.`);
            } else {
              core.info('Checklist already up-to-date or items not found.');
            }

            const comment = `{{ inputs.comment }}`.trim();
            if (comment) {
              await github.rest.issues.createComment({
                owner, repo, issue_number: pr.number, body: comment
              }).catch(() => {});
            }

            const removeLabel = `{{ inputs.remove_label }}`.trim();
            if (removeLabel) {
              await github.rest.issues.removeLabel({
                owner, repo, issue_number: pr.number, name: removeLabel
              }).catch(() => {});
            }

            if ({{ inputs.ready }}) {
              if (pr.draft) {
                await github.rest.pulls.update({ owner, repo, pull_number: pr.number, draft: false });
                core.info(`PR #${pr.number} marked Ready for review.`);
              } else {
                core.info('PR already Ready for review.');
              }
            }

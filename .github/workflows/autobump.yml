name: Release prep (auto-bump & changelog)

on:
  push:
    branches:
      - 'release/**'
      - 'hotfix/**'

permissions:
  contents: write

concurrency:
  group: release-prep-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prep:
    name: Prepare (version & changelog)
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: ubuntu-latest

    env:
      DEBEMAIL: lloydsmart@users.noreply.github.com
      DEBFULLNAME: Lloyd Smart
      EMAIL: lloydsmart@users.noreply.github.com

    steps:
      - name: Checkout branch (full history + tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          persist-credentials: true

      - name: Install Debian packaging tools & git-cliff
        shell: bash
        run: |
          set -euo pipefail
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git-buildpackage \
            devscripts \
            python3-debian \
            debhelper \
            fakeroot \
            libdistro-info-perl \
            ca-certificates
          if ! sudo apt-get install -y --no-install-recommends git-cliff; then
            echo "APT git-cliff not available; falling back to cargo install..."
            sudo apt-get install -y --no-install-recommends cargo pkg-config libssl-dev
            cargo install git-cliff --locked
            echo "${HOME}/.cargo/bin" >> "${GITHUB_PATH}"
          fi
          gbp --version || true
          dch --version || true
          git-cliff --version || true

      - name: Derive version from branch
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          br="${GITHUB_REF_NAME}"   # e.g. release/0.2.8 or hotfix/0.2.8-rc1
          case "$br" in
            release/*) v="${br#release/}" ;;
            hotfix/*)  v="${br#hotfix/}" ;;
            *) echo "Not a release/hotfix branch: $br"; exit 1 ;;
          esac
          [[ "$v" =~ ^[0-9]+(\.[0-9]+){1,2}(-rc[0-9]+)?$ ]] || { echo "Bad version: $v"; exit 1; }
          echo "value=$v" >> "$GITHUB_OUTPUT"
          echo "Version: $v"

      - name: Read current Cargo.toml version
        id: cur
        shell: bash
        run: |
          set -euo pipefail
          cur="$(sed -n 's/^version[[:space:]]*=[[:space:]]*"\(.*\)".*/\1/p' Cargo.toml | head -n1 || true)"
          echo "value=$cur" >> "$GITHUB_OUTPUT"
          echo "Cargo.toml version: ${cur:-<none>}"

      - name: Determine previous tag
        id: prev
        shell: bash
        run: |
          set -euo pipefail
          git fetch --force --prune --tags
          this="v${{ steps.ver.outputs.value }}"
          # latest tag matching v* that is not the current release tag
          prev="$(git tag --list 'v*' --sort=-v:refname | grep -vx "$this" | head -n1 || true)"
          echo "value=$prev" >> "$GITHUB_OUTPUT"
          echo "Previous tag: ${prev:-<none>}"

      - name: Bump version, Debian changelog, and release notes (stage only)
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          v='${{ steps.ver.outputs.value }}'
          cur='${{ steps.cur.outputs.value }}'
          prev='${{ steps.prev.outputs.value }}'

          # 1) Bump Cargo.toml if needed
          changed=0
          if [[ "$cur" != "$v" ]]; then
            scripts/set-cargo-version.sh "$v"
            changed=1
          fi

          # 2) Debian changelog from prev..HEAD with a fixed version & distro
          if [[ -n "$prev" ]]; then
            gbp dch --since "$prev" \
                    --new-version "${v}-1" \
                    --distribution trixie \
                    --meta \
                    --ignore-branch \
                    --verbose
          else
            gbp dch \
              --new-version "${v}-1" \
              --distribution trixie \
              --meta \
              --ignore-branch \
              --verbose
          fi
          changed=1

          # 3) Release notes using git-cliff, cutting at tag v$v
          git-cliff --tag "v${v}" -o RELEASE_NOTES.md
          changed=1

          # Stage changes, but do not commit yet (Cargo.lock may still need regeneration)
          git add -A

          if [[ "$changed" -eq 0 ]]; then
            echo "no_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "no_changes=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Detect if Cargo.toml changed in this run
        id: cargo_changed
        if: steps.bump.outputs.no_changes == 'false'
        shell: bash
        run: |
          set -euo pipefail
          if git diff --name-only --staged | grep -q '^Cargo\.toml$'; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            # Cargo.toml might have been unchanged, but ensure we also catch direct edits outside this job
            if git diff --name-only HEAD.. | grep -q '^Cargo\.toml$'; then
              echo "changed=true" >> "$GITHUB_OUTPUT"
            else
              echo "changed=false" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Install Rust (stable) if Cargo.toml changed
        if: steps.bump.outputs.no_changes == 'false' && steps.cargo_changed.outputs.changed == 'true'
        uses: dtolnay/rust-toolchain@stable

      - name: Regenerate Cargo.lock after version bump
        if: steps.bump.outputs.no_changes == 'false' && steps.cargo_changed.outputs.changed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          cargo generate-lockfile
          test -f Cargo.lock
          # Stage the lockfile if it changed
          git add Cargo.lock || true

      - name: Commit and push changes
        if: steps.bump.outputs.no_changes == 'false'
        shell: bash
        run: |
          set -euo pipefail
          if git diff --cached --quiet; then
            echo "No staged changes; nothing to commit."
            exit 0
          fi
          git config user.name  "Lloyd Smart"
          git config user.email "lloydsmart@users.noreply.github.com"
          git commit -m "chore(release): prepare v${{ steps.ver.outputs.value }} [skip ci]"
          git push

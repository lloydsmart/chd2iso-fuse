name: Reusable - Build

on:
  workflow_call:
    inputs:
      lane:
        type: string
        required: true
      nightly:
        type: boolean
        default: false
    secrets: {}

jobs:
  rust-deb:
    name: Rust build & tests (chd2iso-fuse)
    runs-on: ubuntu-latest
    container:
      image: debian:trixie
      options: --init
    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_DIR: ${{ github.workspace }}/.sccache
      SCCACHE_CACHE_SIZE: 2G
      RUSTFLAGS: "--remap-path-prefix=${{ github.workspace }}=."
      DEBFULLNAME: "Lloyd Smart"
      DEBEMAIL: "lloydsmart@users.noreply.github.com"
      EMAIL: "lloydsmart@users.noreply.github.com"

    steps:
      - name: Install git for checkout & basic tooling
        run: |
          set -euo pipefail
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            git ca-certificates

      - name: Checkout (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git trust and identity
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global user.name  "Lloyd Smart"
          git config --global user.email "lloydsmart@users.noreply.github.com"

      - name: Hash Cargo.lock
        id: cargo_lock
        run: |
          if [ -f Cargo.lock ]; then
            echo "val=$(sha256sum Cargo.lock | cut -d' ' -f1)" >> "$GITHUB_OUTPUT"
          else
            echo "val=none" >> "$GITHUB_OUTPUT"
          fi

      - name: Determine if Rust/package files changed
        id: paths
        uses: dorny/paths-filter@v3
        with:
          filters: |
            rust:
              - 'src/**'
              - '**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'build.rs'
              - 'debian/**'
              - 'Makefile'

      - name: No-op (non-code PR)
        if: ${{ steps.paths.outputs.rust != 'true' && github.event_name == 'pull_request' }}
        run: echo "No Rust/package changes in this PR; skipping heavy build steps."

      - name: Install toolchain & deps
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        run: |
          set -euo pipefail
          apt-get update
          apt-get install -y --no-install-recommends \
            curl ca-certificates git build-essential pkg-config \
            libfuse3-dev fuse3 \
            gcc g++ make \
            rust-all \
            debhelper devscripts dh-cargo lintian \
            bats shellcheck \
            sccache || true

          if ! command -v sccache >/dev/null 2>&1; then
            cargo install sccache --locked
            ln -sf "$HOME/.cargo/bin/sccache" /usr/local/bin/sccache
          fi

          rustc -V; cargo -V; sccache --version || true

      - name: Cache sccache
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        uses: actions/cache@v4
        with:
          path: .sccache
          key: sccache-${{ runner.os }}-${{ steps.cargo_lock.outputs.val }}-${{ github.ref_name }}
          restore-keys: |
            sccache-${{ runner.os }}-${{ steps.cargo_lock.outputs.val }}-
            sccache-${{ runner.os }}-

      - name: Rust fmt & clippy
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        run: |
          cargo fmt --all -- --check
          cargo clippy --workspace --all-targets -- -D warnings

      - name: Rust tests
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        run: cargo test --workspace --locked --all-features

      - name: Debian build
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        env:
          DEB_BUILD_OPTIONS: nocheck
          RUSTC_WRAPPER: ${{ env.RUSTC_WRAPPER }}
          SCCACHE_DIR: ${{ env.SCCACHE_DIR }}
        run: |
          set -euo pipefail
          dpkg-buildpackage -us -uc -b
          mkdir -p artifacts
          mv ../*.deb ../*.buildinfo ../*.changes artifacts/ || true
          shopt -s nullglob
          if compgen -G "artifacts/*" > /dev/null; then
            (cd artifacts && sha256sum * > SHA256SUMS)
          fi

      # Generate release notes on tag builds so release.yml can attach them
      - name: Generate release notes (git-cliff) for tag builds
        if: ${{ github.ref_type == 'tag' && (steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request') }}
        run: |
          set -euo pipefail
          apt-get update && apt-get install -y --no-install-recommends cargo
          cargo install git-cliff --locked || true
          mkdir -p artifacts
          if [ -n "${GITHUB_REF_NAME:-}" ]; then
            git-cliff --tag "${GITHUB_REF_NAME}" -o artifacts/RELEASE_NOTES.md || echo "(no notes)" > artifacts/RELEASE_NOTES.md
          else
            git-cliff -o artifacts/RELEASE_NOTES.md || echo "(no notes)" > artifacts/RELEASE_NOTES.md
          fi
          sed -n '1,80p' artifacts/RELEASE_NOTES.md || true

      - name: Lintian (non-fatal)
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        continue-on-error: true
        run: |
          if compgen -G "artifacts/*.deb" > /dev/null; then
            lintian artifacts/*.deb || true
          fi

      - name: Create nightly manifest
        if: ${{ inputs.nightly && (steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request') }}
        run: |
          set -euo pipefail
          ts="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          sha="${GITHUB_SHA}"
          lane="${{ inputs.lane }}"
          files=$(ls -1 artifacts 2>/dev/null | sed 's/^/  "/; s/$/"/' | paste -sd, - || true)
          {
            echo "{"
            echo "  \"nightly\": true,"
            echo "  \"timestamp\": \"${ts}\","
            echo "  \"sha\": \"${sha}\","
            echo "  \"lane\": \"${lane}\","
            echo "  \"files\": [ ${files} ]"
            echo "}"
          } > artifacts/manifest.json

      - name: Upload nightly artifacts
        if: ${{ inputs.nightly && (steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request') }}
        uses: actions/upload-artifact@v4
        with:
          name: chd2iso-fuse-nightly-${{ github.run_id }}-${{ github.sha }}
        path: artifacts/

      - name: Upload build artifacts
        if: ${{ !inputs.nightly && (steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request') }}
        uses: actions/upload-artifact@v4
        with:
          name: chd2iso-fuse-${{ inputs.lane }}-${{ github.sha }}
          path: artifacts/

name: Reusable - Build

on:
  workflow_call:
    inputs:
      lane:
        type: string
        required: true
      nightly:
        type: boolean
        default: false
      # NEW: force tag-like behavior for artifact naming and notes generation
      release_mode:
        type: boolean
        default: false
    secrets: {}

# Ensure every run: step executes with Bash (fixes shopt/compgen)
defaults:
  run:
    shell: bash

jobs:
  rust-deb:
    name: Rust build & tests (chd2iso-fuse)
    runs-on: ubuntu-latest
    container:
      image: debian:trixie
      options: --init
    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_DIR: ${{ github.workspace }}/.sccache
      SCCACHE_CACHE_SIZE: 2G
      RUSTFLAGS: "--remap-path-prefix=${{ github.workspace }}=."
      DEBFULLNAME: "Lloyd Smart"
      DEBEMAIL: "lloydsmart@users.noreply.github.com"
      EMAIL: "lloydsmart@users.noreply.github.com"

    steps:
      - name: Install git for checkout & basic tooling
        run: |
          set -euo pipefail
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            bash git ca-certificates

      - name: Checkout (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Configure git trust and identity
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global user.name  "Lloyd Smart"
          git config --global user.email "lloydsmart@users.noreply.github.com"

      - name: Hash Cargo.lock
        id: cargo_lock
        run: |
          if [ -f Cargo.lock ]; then
            echo "val=$(sha256sum Cargo.lock | cut -d' ' -f1)" >> "$GITHUB_OUTPUT"
          else
            echo "val=none" >> "$GITHUB_OUTPUT"
          fi

      - name: Determine if Rust/package files changed
        id: paths
        uses: dorny/paths-filter@v3
        with:
          filters: |
            rust:
              - 'src/**'
              - '**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'build.rs'
              - 'debian/**'
              - 'Makefile'

      - name: No-op (non-code PR)
        if: ${{ steps.paths.outputs.rust != 'true' && github.event_name == 'pull_request' }}
        run: echo "No Rust/package changes in this PR; skipping heavy build steps."

      - name: Install toolchain & deps
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        run: |
          set -euo pipefail
          apt-get update
          apt-get install -y --no-install-recommends \
            curl ca-certificates git build-essential pkg-config \
            libfuse3-dev fuse3 \
            gcc g++ make \
            rust-all \
            debhelper devscripts dh-cargo lintian \
            bats shellcheck \
            sccache || true

          if ! command -v sccache >/dev/null 2>&1; then
            cargo install sccache --locked
            ln -sf "$HOME/.cargo/bin/sccache" /usr/local/bin/sccache
          fi

          rustc -V; cargo -V; sccache --version || true

      - name: Prepare sccache dir
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        run: |
          set -euo pipefail
          mkdir -p .sccache

      - name: Cache sccache
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        uses: actions/cache@v4
        with:
          path: .sccache
          key: sccache-${{ runner.os }}-${{ steps.cargo_lock.outputs.val }}-${{ github.ref_name }}
          restore-keys: |
            sccache-${{ runner.os }}-${{ steps.cargo_lock.outputs.val }}-
            sccache-${{ runner.os }}-

      - name: Rust fmt & clippy
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        run: |
          cargo fmt --all -- --check
          cargo clippy --workspace --all-targets -- -D warnings

      - name: Rust tests
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        run: cargo test --workspace --locked --all-features

      - name: Debian build
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        env:
          DEB_BUILD_OPTIONS: nocheck
          RUSTC_WRAPPER: ${{ env.RUSTC_WRAPPER }}
          SCCACHE_DIR: ${{ env.SCCACHE_DIR }}
        run: |
          set -euo pipefail
          dpkg-buildpackage -us -uc -b
          mkdir -p artifacts
          mv ../*.deb ../*.buildinfo ../*.changes artifacts/ || true
          shopt -s nullglob
          if compgen -G "artifacts/*" > /dev/null; then
            (cd artifacts && sha256sum * > SHA256SUMS)
          fi

      # Generate release notes when either (a) this is a real tag event, or (b) release_mode is forced by caller
      - name: Generate release notes (git-cliff) for release
        if: ${{ inputs.release_mode || github.ref_type == 'tag' }}
        run: |
          set -euo pipefail
          apt-get update && apt-get install -y --no-install-recommends cargo
          cargo install git-cliff --locked || true
          mkdir -p artifacts
          tag="${GITHUB_REF_NAME:-}"
          if [ -n "$tag" ] && [[ "$tag" == v* ]]; then
            git-cliff --tag "$tag" -o artifacts/RELEASE_NOTES.md || echo "(no notes)" > artifacts/RELEASE_NOTES.md
          else
            git-cliff -o artifacts/RELEASE_NOTES.md || echo "(no notes)" > artifacts/RELEASE_NOTES.md
          fi
          sed -n '1,80p' artifacts/RELEASE_NOTES.md || true

      - name: Lintian (non-fatal)
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        continue-on-error: true
        run: |
          if compgen -G "artifacts/*.deb" > /dev/null; then
            lintian artifacts/*.deb || true
          fi

      # Deterministic artifact name for releases
      - name: Set artifact name
        id: aname
        run: |
          set -euo pipefail
          if [ "${{ inputs.release_mode }}" = "true" ] || [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            echo "val=release-artifacts" >> "$GITHUB_OUTPUT"
          elif [ "${{ inputs.nightly }}" = "true" ]; then
            echo "val=chd2iso-fuse-nightly-${GITHUB_RUN_ID}-${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          else
            echo "val=chd2iso-fuse-${{ inputs.lane }}-${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          fi
          echo "Artifact name: $(cat "$GITHUB_OUTPUT" | sed -n 's/^val=//p')"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.aname.outputs.val }}
          path: artifacts/
          if-no-files-found: error

name: Reusable — Build & Test
on:
  workflow_call:
    inputs:
      lane: { type: string, required: true }
      nightly: { type: boolean, default: false }

permissions:
  contents: read

jobs:
  rust-deb:
    name: Rust build & tests (chd2iso-fuse)
    runs-on: ubuntu-latest
    container:
      image: debian:trixie
      options: --init
    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_DIR: ${{ github.workspace }}/.sccache
      SCCACHE_CACHE_SIZE: 2G
      RUSTFLAGS: "--remap-path-prefix=${{ github.workspace }}=."
      DEBFULLNAME: "Lloyd Smart"
      DEBEMAIL: "lloydsmart@users.noreply.github.com"
      EMAIL: "lloydsmart@users.noreply.github.com"
    steps:
      - name: Checkout (with tags)
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # Detect whether Rust/package files changed on PRs
      - name: Determine if Rust/package files changed
        id: paths
        uses: dorny/paths-filter@v3
        with:
          filters: |
            rust:
              - 'src/**'
              - '**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'build.rs'
              - 'debian/**'
              - 'Makefile'

      # QUICK EXIT: acknowledge non-code PRs
      - name: No-op (non-code PR)
        if: ${{ steps.paths.outputs.rust != 'true' && github.event_name == 'pull_request' }}
        run: echo "No Rust/package changes in this PR; skipping heavy build steps."

      # ↓ Gate the rest of your heavy steps with the same condition:
      - name: Install toolchain & deps
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        run: |
          # ... (unchanged) ...

      - name: Cache sccache
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        uses: actions/cache@v4
        with:
          path: .sccache
          key: sccache-${{ runner.os }}-${{ steps.cargo_lock.outputs.val }}-${{ github.ref_name }}
          restore-keys: |
            sccache-${{ runner.os }}-${{ steps.cargo_lock.outputs.val }}-
            sccache-${{ runner.os }}-

      - name: Rust fmt & clippy
        run: |
          cargo fmt --all -- --check
          cargo clippy --workspace --all-targets -- -D warnings

      - name: Rust tests
        run: cargo test --workspace --locked --all-features

      - name: Debian build
        env:
          DEB_BUILD_OPTIONS: nocheck
          RUSTC_WRAPPER: ${{ env.RUSTC_WRAPPER }}   # keep sccache wrapping for dh-cargo
          SCCACHE_DIR: ${{ env.SCCACHE_DIR }}
        run: |
          dpkg-buildpackage -us -uc -b
          mkdir -p artifacts
          mv ../*.deb ../*.buildinfo ../*.changes artifacts/ || true
          (cd artifacts && sha256sum * > SHA256SUMS || true)

      - name: Lintian (non-fatal)
        continue-on-error: true
        run: |
          set -e
          if compgen -G "artifacts/*.deb" > /dev/null; then
            lintian artifacts/*.deb || true
          fi

      - name: Create nightly manifest
        if: ${{ inputs.nightly }}
        run: |
          set -euo pipefail
          ts="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          sha="${GITHUB_SHA}"
          lane="${{ inputs.lane }}"
          files=$(ls -1 artifacts 2>/dev/null | sed 's/^/  "/; s/$/"/' | paste -sd, - || true)
          {
            echo "{"
            echo "  \"nightly\": true,"
            echo "  \"timestamp\": \"${ts}\","
            echo "  \"sha\": \"${sha}\","
            echo "  \"lane\": \"${lane}\","
            echo "  \"files\": [ ${files} ]"
            echo "}"
          } > artifacts/manifest.json

      # Nightly naming
      - name: Upload build artifacts
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: chd2iso-fuse-nightly-${{ github.run_id }}-${{ github.sha }}
          path: artifacts/

      # Default naming (non-nightly)
      - name: Upload build artifacts
        if: ${{ !inputs.nightly }}
        uses: actions/upload-artifact@v4
        with:
          name: chd2iso-fuse-${{ inputs.lane }}-${{ github.sha }}
          path: artifacts/

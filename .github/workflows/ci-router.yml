name: CI Router (git-flow)

on:
  push:
    branches: [ "**" ]
    paths:
      - "src/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "build.rs"
      - "debian/**"
      - ".github/workflows/**"
      - "Makefile"
  pull_request:
    branches: [ develop, main ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dedupe:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip.outputs.should_skip }}
    steps:
      - id: skip
        uses: fkirc/skip-duplicate-actions@v5
        with:
          cancel_others: 'true'
          skip_after_successful_duplicate: 'true'
          concurrent_skipping: 'same_content'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'

  decide:
    if: ${{ needs.dedupe.outputs.should_skip != 'true' }}
    needs: dedupe
    name: Decide lane
    runs-on: ubuntu-latest
    outputs:
      lane: ${{ steps.which.outputs.lane }}
      nightly: ${{ steps.which.outputs.nightly }}
    steps:
      - id: which
        shell: bash
        run: |
          set -euo pipefail
          ref="${GITHUB_REF_NAME}"
          lane="feature"
          case "$ref" in
            develop) lane="develop" ;;
            main)    lane="main" ;;
          esac
          [[ "$ref" == release/* ]] && lane="release"
          [[ "$ref" == hotfix/*  ]] && lane="hotfix"

          # Nightly rule: scheduled runs on develop => nightly=true
          nightly="false"
          if [[ "${{ github.event_name }}" == "schedule" && "$lane" == "develop" ]]; then
            nightly="true"
          fi

          echo "lane=$lane"       >> "$GITHUB_OUTPUT"
          echo "nightly=$nightly" >> "$GITHUB_OUTPUT"

  verify-release:
    if: ${{ startsWith(github.ref_name, 'release/') || startsWith(github.ref_name, 'hotfix/') }}
    name: Verify release lane
    needs: decide
    uses: ./.github/workflows/_verify-release.yml
    secrets: inherit

  # Runs on PRs only — reports the status your ruleset requires
  build_pr:
    name: Build & Test
    if: ${{ github.event_name == 'pull_request' }}
    needs: [dedupe, decide]              # <-- do NOT include verify-release here
    uses: ./.github/workflows/_build.yml
    with:
      lane: ${{ needs.decide.outputs.lane }}
    secrets: inherit

  # Runs on pushes to branches — split into two paths:
  build_push_default:
    name: Build & Test
    if: ${{ github.event_name == 'push' && !(startsWith(github.ref_name, 'release/') || startsWith(github.ref_name, 'hotfix/')) }}
    needs: [dedupe, decide]
    uses: ./.github/workflows/_build.yml
    with:
      lane: ${{ needs.decide.outputs.lane }}
    secrets: inherit

  build_push_release:
    name: Build & Test
    if: ${{ github.event_name == 'push' && (startsWith(github.ref_name, 'release/') || startsWith(github.ref_name, 'hotfix/')) }}
    needs: [dedupe, decide, verify-release]     # <-- gate behind verify-release for release/hotfix pushes
    uses: ./.github/workflows/_build.yml
    with:
      lane: ${{ needs.decide.outputs.lane }}
    secrets: inherit

  release:
    if: ${{ needs.dedupe.outputs.should_skip != 'true' && needs.decide.outputs.lane != 'feature' && success() && github.event_name != 'pull_request' }}
    name: Release lane (gated)
    needs: [dedupe, decide, build]
    permissions:
      contents: write
    uses: ./.github/workflows/_release.yml
    with:
      lane:        ${{ needs.decide.outputs.lane }}
      nightly:     ${{ needs.decide.outputs.nightly }}
      apt_enabled: false   # flip to true when APT publishing is ready
    secrets: inherit

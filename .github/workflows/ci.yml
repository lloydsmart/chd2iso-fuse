name: CI (Build & Test) 🛠️⚡

on:
  pull_request:
    branches: [ develop, main ]
  push:
    branches: [ "**" ]
    paths:
      - "src/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "build.rs"
      - "debian/**"
      - ".github/workflows/ci.yml"
      - "scripts/**"

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # GATE: decide whether heavy CI is needed for PRs (incl. conflict probe)
  gate:
    name: 🚦 Decide if heavy CI is needed (PRs)
    runs-on: ubuntu-latest
    outputs:
      needs_ci: ${{ steps.export.outputs.needs_ci }}
    steps:
      - name: 🧰 Mode
        id: mode
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "is_pr=true" >>"$GITHUB_OUTPUT"
          else
            echo "is_pr=false" >>"$GITHUB_OUTPUT"
          fi

      # Non-PR paths (i.e., push): always run
      - name: 📤 Export for push
        if: steps.mode.outputs.is_pr == 'false'
        id: export_push
        run: echo "needs_ci=true" >>"$GITHUB_OUTPUT"

      # Identify back-merge PR (main → develop)
      - name: 🔎 Identify back-merge PR
        if: steps.mode.outputs.is_pr == 'true'
        id: bm
        shell: bash
        run: |
          if [[ "${{ github.event.pull_request.base.ref }}" == "develop" && \
                "${{ github.event.pull_request.head.ref }}" == "main" ]]; then
            echo "is_backmerge=true" >>"$GITHUB_OUTPUT"
          else
            echo "is_backmerge=false" >>"$GITHUB_OUTPUT"
          fi

      # For back-merge evaluation we need full refs
      - name: 📥 Checkout (full)
        if: steps.mode.outputs.is_pr == 'true' && steps.bm.outputs.is_backmerge == 'true'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🔀 Compare develop…main (ahead/behind)
        if: steps.mode.outputs.is_pr == 'true' && steps.bm.outputs.is_backmerge == 'true'
        id: compare
        shell: bash
        run: |
          set -euo pipefail
          git remote set-url origin "${{ github.server_url }}/${{ github.repository }}"
          git fetch --no-tags --prune origin \
            +refs/heads/develop:refs/remotes/origin/develop \
            +refs/heads/main:refs/remotes/origin/main
          read A B < <(git rev-list --left-right --count origin/develop...origin/main)
          echo "ahead_on_develop=${A}" >>"$GITHUB_OUTPUT"
          echo "behind_on_main=${B}"  >>"$GITHUB_OUTPUT"

      - name: 🧪 Conflict probe (simulate merge main → develop)
        if: steps.mode.outputs.is_pr == 'true' && steps.bm.outputs.is_backmerge == 'true'
        id: probe
        shell: bash
        run: |
          set -euo pipefail
          git checkout -q -B tmp origin/develop
          if git merge --no-commit --no-ff origin/main >/dev/null 2>&1; then
            echo "conflicts=false" >>"$GITHUB_OUTPUT"
            git merge --abort || true
          else
            echo "conflicts=true" >>"$GITHUB_OUTPUT"
            git merge --abort || true
          fi

      - name: 🧮 Decide (PR)
        if: steps.mode.outputs.is_pr == 'true'
        id: export_pr
        shell: bash
        run: |
          # Non-backmerge PRs always run heavy CI
          if [[ "${{ steps.bm.outputs.is_backmerge }}" != "true" ]]; then
            echo "needs_ci=true" >>"$GITHUB_OUTPUT"
            exit 0
          fi
          A="${{ steps.compare.outputs.ahead_on_develop || '0' }}"
          C="${{ steps.probe.outputs.conflicts || 'false' }}"
          if [[ "$C" == "true" || "$A" -gt 0 ]]; then
            echo "needs_ci=true" >>"$GITHUB_OUTPUT"
          else
            echo "needs_ci=false" >>"$GITHUB_OUTPUT"
          fi

      - name: 📤 Export final
        id: export
        shell: bash
        run: |
          if [[ "${{ steps.mode.outputs.is_pr }}" == "true" ]]; then
            echo "needs_ci=${{ steps.export_pr.outputs.needs_ci }}" >>"$GITHUB_OUTPUT"
          else
            echo "needs_ci=${{ steps.export_push.outputs.needs_ci }}" >>"$GITHUB_OUTPUT"
          fi

  # Always-on quick sanity for PRs (even if heavy CI is skipped)
  quick_sanity:
    name: 🧪 Quick sanity (fmt + check)
    needs: gate
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 🧩 Install system deps (minimal)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends pkg-config libfuse3-dev

      - name: 🦀 Setup Rust (stable, rustfmt)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt

      - name: 🎯 fmt
        run: cargo fmt --all -- --check

      - name: 🚬 Smoke compile (fast)
        env: { CARGO_TERM_COLOR: always }
        run: cargo check --workspace --locked --all-features

  build_test:
    name: 🛠️ Build & Test (Linux)
    needs: gate
    # Skip heavy CI for back-merge PRs (manual or auto)
    if: |
      !(
        github.event_name == 'pull_request' &&
        (
          (github.base_ref == 'develop' && github.head_ref == 'main') ||
          contains(github.event.pull_request.title, 'Back-merge') ||
          contains(github.event.pull_request.title, 'back-merge') ||
          contains(toJson(github.event.pull_request.labels), 'back-merge')
        )
      )
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: 🔐 Hash Cargo.lock
        id: lock
        run: |
          if [ -f Cargo.lock ]; then
            echo "val=$(sha256sum Cargo.lock | cut -d' ' -f1)" >> "$GITHUB_OUTPUT"
          else
            echo "val=none" >> "$GITHUB_OUTPUT"
          fi

      - name: 🦀 Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: 📦 Prepare cargo cache dirs
        run: |
          set -euo pipefail
          mkdir -p ~/.cargo/registry
          mkdir -p ~/.cargo/git

      - name: 🗃️ Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ runner.os }}-${{ steps.lock.outputs.val }}

      - name: 🗄️ Cache cargo git
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: cargo-git-${{ runner.os }}-${{ steps.lock.outputs.val }}

      - name: 🧩 Install system deps (minimal)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends pkg-config libfuse3-dev

      - name: 🎯 fmt
        run: cargo fmt --all -- --check

      - name: 🔎 clippy
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: ✅ Test
        env: { CARGO_TERM_COLOR: always }
        run: cargo test --workspace --locked --all-features

  package_deb:
    name: 📦 Debian package (push only)
    needs: build_test
    if: |
      !(
        github.event_name == 'pull_request' &&
        (
          (github.base_ref == 'develop' && github.head_ref == 'main') ||
          contains(github.event.pull_request.title, 'Back-merge') ||
          contains(github.event.pull_request.title, 'back-merge') ||
          contains(toJson(github.event.pull_request.labels), 'back-merge')
        )
      )
      && github.event_name == 'push'
      && !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[ci skip]')
      && (github.ref_name == 'main' || startsWith(github.ref_name, 'release/'))
    runs-on: ubuntu-latest
    container:
      image: debian:trixie
      options: --init
    env:
      RUSTFLAGS: "--remap-path-prefix=${{ github.workspace }}=."
      DEBFULLNAME: "Lloyd Smart"
      DEBEMAIL: "lloydsmart@users.noreply.github.com"
    steps:
      - name: 🧰 Install git for checkout
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends git ca-certificates

      - name: 📥 Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: 🔏 Configure git trust
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: 🧰 Install build deps
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            build-essential pkg-config \
            libfuse3-dev fuse3 \
            rust-all \
            debhelper devscripts dh-cargo lintian

      - name: 🏗️ Build .deb (nocheck)
        env:
          DEB_BUILD_OPTIONS: nocheck
        run: |
          dpkg-buildpackage -us -uc -b
          mkdir -p artifacts
          mv ../*.deb ../*.buildinfo ../*.changes artifacts/ || true
          (cd artifacts && sha256sum * > SHA256SUMS || true)

      - name: 🔍 Lintian (non-fatal)
        continue-on-error: true
        run: |
          if compgen -G "artifacts/*.deb" > /dev/null; then
            lintian artifacts/*.deb || true
          fi

      - name: ⬆️ Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chd2iso-fuse-${{ github.sha }}
          path: artifacts/

name: Build & (on tag) Release – Debian Trixie

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:

permissions:
  contents: write
  actions: read
  pull-requests: write

jobs:
  build-debs:
    name: Build .deb (always)
    runs-on: ubuntu-latest
    container:
      image: debian:trixie
      options: --init
    env:
    GIT_CLIFF_VERSION: ${{ secrets.GIT_CLIFF_VERSION || '2.9.1' }}
    RUSTC_WRAPPER: sccache
    SCCACHE_DIR: ${{ github.workspace }}/.sccache
    SCCACHE_CACHE_SIZE: 2G
    RUSTFLAGS: "--remap-path-prefix=${{ github.workspace }}=."
    DEBFULLNAME: "Lloyd Smart"
    DEBEMAIL: "lloydsmart@users.noreply.github.com"
    EMAIL: "lloydsmart@users.noreply.github.com"

    steps:
      - name: Install git for checkout
        run: |
          set -e
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends git ca-certificates

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Configure git trust and identity
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global user.name "Lloyd Smart"
          git config --global user.email "lloydsmart@users.noreply.github.com"

      - name: Debug event info
        run: |
          echo "event_name=${GITHUB_EVENT_NAME}"
          echo "ref=${GITHUB_REF}"
          echo "ref_name=${GITHUB_REF_NAME}"
          git describe --tags --always || true

      - name: Install build deps (one shot)
        run: |
          set -e
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            build-essential pkg-config \
            libfuse3-dev fuse3 \
            rustc cargo rustfmt rust-clippy clang \
            devscripts debhelper dh-cargo lintian \
            git-buildpackage \
            sccache \
            curl jq ca-certificates

      - name: Add ~/.cargo/bin to PATH
        run: echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"

      - name: Detect rustc version
        id: rustver
        run: echo "ver=$(rustc -V | awk '{print $2}')" >> "$GITHUB_OUTPUT"

      - name: Compute Cargo.lock hash (safe)
        id: cargo_lock_hash
        run: |
          set -e
          if find . -name Cargo.lock -type f | grep -q .; then
            sha=$(find . -name Cargo.lock -type f -print0 | sort -z | xargs -0 cat | sha256sum | cut -d' ' -f1)
            echo "hash=$sha" >> "$GITHUB_OUTPUT"
          else
            echo "hash=none" >> "$GITHUB_OUTPUT"
          fi

      - name: Compute SOURCE_DATE_EPOCH from HEAD
        id: sde
        run: echo "epoch=$(git log -1 --format=%ct)" >> "$GITHUB_OUTPUT"

      - name: Ensure sccache dir exists and show path
        run: |
          mkdir -p "${SCCACHE_DIR}"
          echo "SCCACHE_DIR=${SCCACHE_DIR}"

      - name: Cache sccache store
        uses: actions/cache@v4
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: sccache-${{ runner.os }}-${{ steps.cargo_lock_hash.outputs.hash }}-rust-${{ steps.rustver.outputs.ver }}
          restore-keys: |
            sccache-${{ runner.os }}-

      - name: Cache cargo registry & target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-${{ runner.os }}-${{ steps.cargo_lock_hash.outputs.hash }}-rust-${{ steps.rustver.outputs.ver }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Cache git-cliff binary
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/git-cliff
          key: git-cliff-bin-${{ runner.os }}-${{ env.GIT_CLIFF_VERSION }}

      - name: Install git-cliff (pinned)
        run: |
          echo "Installing git-cliff ${GIT_CLIFF_VERSION}"
          if ! command -v git-cliff >/dev/null 2>&1; then
            cargo install git-cliff --locked --version "${GIT_CLIFF_VERSION}"
          fi

      - name: Ensure helper scripts are executable
        run: |
          chmod +x scripts/gen-debian-changelog.sh
          chmod +x scripts/gen-release-notes.sh

      - name: sccache zero-stats
        run: sccache --zero-stats || true

      # --- Release-only changelog generation & guards ---
      - name: Derive version from tag
        if: startsWith(github.ref, 'refs/tags/')
        id: ver
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "debver=${VERSION}-1" >> "$GITHUB_OUTPUT"

      - name: Generate Debian changelog (gbp dch -> dch --newversion)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TAG: ${{ github.ref_name }}
        run: scripts/gen-debian-changelog.sh "$TAG" trixie

      - name: Verify Debian version matches tag (pre-build)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          set -eu
          EXPECT="${{ steps.ver.outputs.debver }}"
          ACTUAL="$(dpkg-parsechangelog -SVersion)"
          echo "PRE-BUILD: expected=${EXPECT} actual=${ACTUAL}"
          sed -n '1,20p' debian/changelog || true
          [ "${ACTUAL}" = "${EXPECT}" ]

      - name: Generate CHANGELOG.md + RELEASE_NOTES.md (git-cliff)
        if: startsWith(github.ref, 'refs/tags/')
        run: scripts/gen-release-notes.sh artifacts

      # --- Build & package ---
      - name: Verify Cargo.lock is present
        run: |
          test -f Cargo.lock || { echo "ERROR: Cargo.lock missing. Commit it to the repo."; exit 1; }

      - name: cargo fetch (locked)
        run: cargo fetch --locked

      - name: Cargo fmt + clippy
        env:
          SOURCE_DATE_EPOCH: ${{ steps.sde.outputs.epoch }}
        run: |
          cargo fmt -- --check
          cargo clippy --all-targets --frozen -- -D warnings

      - name: Build .deb with debuild
        env:
          RUSTC_WRAPPER: ${{ env.RUSTC_WRAPPER }}
          SCCACHE_DIR: ${{ env.SCCACHE_DIR }}
          SOURCE_DATE_EPOCH: ${{ steps.sde.outputs.epoch }}
        run: debuild -us -uc -b

      - name: Show produced files (parent dir)
        run: |
          echo "Parent directory after build:"
          ls -l .. | sed -n '1,200p' || true

      - name: "Guard: built files for expected deb version must exist"
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          set -eu
          VER_EXPECT="${{ steps.ver.outputs.debver }}"
          echo "POST-BUILD: expecting files containing _${VER_EXPECT}_"
          if ! find .. -maxdepth 1 -type f \
               \( -name "*_${VER_EXPECT}_*.deb" -o -name "*_${VER_EXPECT}_*.buildinfo" -o -name "*_${VER_EXPECT}_*.changes" \) \
               | grep -q .; then
            echo "ERROR: No files for ${VER_EXPECT} were built."
            echo "Top of debian/changelog at build time:"
            sed -n '1,20p' debian/changelog || true
            exit 1
          fi

      - name: Collect artifacts (tagged build; auto-detect by version)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          set -eu
          mkdir -p artifacts
          VER="$(dpkg-parsechangelog -SVersion)"
          echo "Collecting *_${VER}_* from parent dir…"
          find .. -maxdepth 1 -type f \( -name "*_${VER}_*.deb" -o -name "*_${VER}_*.buildinfo" -o -name "*_${VER}_*.changes" \) -print0 \
            | xargs -0 -I{} mv "{}" artifacts/
          test -f artifacts/RELEASE_NOTES.md || echo "(tag build – notes elsewhere)" > artifacts/RELEASE_NOTES.md
          ls -l artifacts || true

      - name: Collect artifacts (non-tag)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          set -e
          mkdir -p artifacts
          mv ../chd2iso-fuse_*_amd64.deb artifacts/ || true
          mv ../chd2iso-fuse-dbgsym_*_amd64.deb artifacts/ || true
          mv ../chd2iso-fuse_*_amd64.buildinfo artifacts/ || true
          mv ../chd2iso-fuse_*_amd64.changes artifacts/ || true
          test -f artifacts/RELEASE_NOTES.md || echo "(build from branch/PR – no tagged release notes)" > artifacts/RELEASE_NOTES.md
          ls -l artifacts || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chd2iso-fuse-debs
          path: artifacts/*
          if-no-files-found: error
          retention-days: 14

      # --- NOW do the PR (after build & upload) so nothing clobbers our changelog before packaging ---
      - name: Prepare CHANGELOG update (copy into repo)
        if: startsWith(github.ref, 'refs/tags/')
        run: cp artifacts/CHANGELOG.md CHANGELOG.md

      - name: Create PR to update CHANGELOG.md and debian/changelog on main
        if: startsWith(github.ref, 'refs/tags/')
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          branch: chore/update-changelogs-${{ github.ref_name }}
          title: "chore(release): update changelogs for ${{ github.ref_name }}"
          body: |
            Automated PR to update CHANGELOG.md and debian/changelog for ${{ github.ref_name }}.
            - `CHANGELOG.md` generated by git-cliff
            - `debian/changelog` generated by gbp dch / dch
          commit-message: "chore(release): update CHANGELOG.md and debian/changelog for ${{ github.ref_name }}"
          add-paths: |
            CHANGELOG.md
            debian/changelog
          delete-branch: true
          labels: |
            automated
            changelog

  publish-release:
    name: Publish GitHub Release (only on tag)
    runs-on: ubuntu-latest
    needs: build-debs
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && needs.build-debs.result == 'success' }}
    steps:
      - name: Debug event info
        run: |
          echo "event_name=${GITHUB_EVENT_NAME}"
          echo "ref=${GITHUB_REF}"
          echo "ref_name=${GITHUB_REF_NAME}"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: chd2iso-fuse-debs
          path: artifacts

      - name: Create/Update Release & attach artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: chd2iso-fuse ${{ github.ref_name }}
          body_path: artifacts/RELEASE_NOTES.md
          generate_release_notes: false
          fail_on_unmatched_files: false
          files: |
            artifacts/CHANGELOG.md
            artifacts/*.deb
            artifacts/*.buildinfo
            artifacts/*.changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

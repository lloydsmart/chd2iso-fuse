name: Auto tag on merge (release/hotfix → main)

on:
  push:
    branches: [ main ]

permissions:
  contents: write   # needed to create tags
  pull-requests: read

concurrency:
  group: auto-tag-${{ github.ref }}
  cancel-in-progress: false

jobs:
  tag_if_release_merge:
    # Ignore prep commits that used [skip ci]
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: ubuntu-latest
    steps:
      - name: Lookup merged PR for this commit
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const headSha = context.payload.head_commit.id;
            // Search for the PR whose merge_commit_sha == headSha
            const prs = await github.paginate(github.rest.pulls.list, {
              owner, repo, state: 'closed', per_page: 100
            });
            const match = prs.find(p => p.merged_at && p.merge_commit_sha === headSha);
            return match ? {
              number: match.number,
              headRef: match.head.ref,   // e.g. "release/0.2.8"
              baseRef: match.base.ref,   // e.g. "main"
              title:   match.title
            } : null;

      - name: Stop if no matching merged PR
        if: ${{ steps.pr.outputs.result == 'null' }}
        run: echo "No merged PR found for this commit. Skipping."

      - name: Guard: only tag merges from release/* or hotfix/*
        if: ${{ steps.pr.outputs.result != 'null' && !(startsWith(fromJSON(steps.pr.outputs.result).headRef, 'release/') || startsWith(fromJSON(steps.pr.outputs.result).headRef, 'hotfix/')) }}
        run: echo "Merged PR is not from release/* or hotfix/* — skipping."

      - name: Checkout main
        if: ${{ steps.pr.outputs.result != 'null' && (startsWith(fromJSON(steps.pr.outputs.result).headRef, 'release/') || startsWith(fromJSON(steps.pr.outputs.result).headRef, 'hotfix/')) }}
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Read version from Cargo.toml
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          ver="$(sed -n 's/^version[[:space:]]*=[[:space:]]*"\(.*\)".*/\1/p' Cargo.toml | head -n1)"
          [[ -n "$ver" ]] || { echo "No version in Cargo.toml"; exit 1; }
          [[ "$ver" != *-dev* ]] || { echo "Version has -dev suffix; refusing to tag"; exit 1; }
          echo "val=$ver" >> "$GITHUB_OUTPUT"
          echo "Version: $ver"

      - name: Verify versions (reusable guard)
        uses: ./.github/workflows/_verify-release.yml

      - name: Create & push annotated tag
        env:
          VER: ${{ steps.ver.outputs.val }}
        run: |
          set -euo pipefail
          tag="v${VER}"
          if git rev-parse -q --verify "refs/tags/${tag}" >/dev/null; then
            echo "Tag ${tag} already exists; skipping."
            exit 0
          fi
          git tag -a "${tag}" -m "chd2iso-fuse ${tag}"
          git push origin "${tag}"

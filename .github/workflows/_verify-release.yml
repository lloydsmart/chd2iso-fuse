name: Reusable ‚Äì Verify release üîç‚úÖ

on:
  workflow_call: {}

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  verify:
    name: üîé Verify versions (Cargo.toml / debian / binary)
    runs-on: ubuntu-latest
    container:
      image: debian:trixie
      options: --init
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üõ†Ô∏è Install minimal deps
        run: |
          set -euo pipefail
          apt-get update
          apt-get install -y --no-install-recommends \
            build-essential pkg-config \
            libfuse3-dev fuse3 \
            rust-all rust-clippy rustfmt \
            debhelper devscripts dh-cargo dpkg-dev

      - name: üìñ Read Cargo.toml version
        id: cargo
        run: |
          set -euo pipefail
          CARGO_VER="$(sed -n 's/^version[[:space:]]*=[[:space:]]*"\(.*\)"/\1/p' Cargo.toml | head -n1)"
          if [[ -z "${CARGO_VER}" ]]; then
            echo "Failed to read version from Cargo.toml"; exit 1
          fi
          echo "version=${CARGO_VER}" >> "$GITHUB_OUTPUT"
          echo "Cargo.toml version: ${CARGO_VER}"

          # Disallow -dev suffix on release/hotfix
          if [[ "${CARGO_VER}" == *-dev* ]]; then
            echo "‚ùå ERROR: Cargo.toml has a -dev suffix on a release lane: ${CARGO_VER}"
            exit 1
          fi

      - name: üìñ Read Debian upstream version
        id: deb
        run: |
          set -euo pipefail
          DEB_FULL="$(dpkg-parsechangelog -SVersion || true)"
          if [[ -z "${DEB_FULL}" ]]; then
            echo "‚ùå ERROR: Could not parse debian/changelog. Did you update it for this release lane?"; exit 1
          fi
          UPSTREAM="${DEB_FULL%%-*}"
          echo "full=${DEB_FULL}"     >> "$GITHUB_OUTPUT"
          echo "upstream=${UPSTREAM}" >> "$GITHUB_OUTPUT"
          echo "Debian version (full): ${DEB_FULL}"
          echo "Debian upstream:       ${UPSTREAM}"

      - name: üîç Compare Cargo vs Debian upstream (supports RC mapping)
        env:
          CARGO_VER: ${{ steps.cargo.outputs.version }}
          DEB_UP:    ${{ steps.deb.outputs.upstream }}
        run: |
          set -euo pipefail
          if [[ "${CARGO_VER}" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-rc([0-9]+)$ ]]; then
            EXPECT="${BASH_REMATCH[1]}~rc${BASH_REMATCH[2]}"
          else
            EXPECT="${CARGO_VER}"
          fi

          echo "Expect Debian upstream: ${EXPECT}"
          if [[ "${DEB_UP}" != "${EXPECT}" ]]; then
            echo "‚ùå ERROR: debian/changelog upstream (${DEB_UP}) != expected (${EXPECT})"
            exit 1
          fi

      - name: üèóÔ∏è Build release binary (for version check)
        run: cargo build --release --locked

      - name: üß™ Verify binary --version matches Cargo.toml
        env:
          CARGO_VER: ${{ steps.cargo.outputs.version }}
        run: |
          set -euo pipefail
          BIN="./target/release/chd2iso-fuse"
          test -x "$BIN" || { echo "‚ùå Binary not found at ${BIN}"; exit 1; }
          BIN_VER="$("$BIN" --version | awk '{print $2}')"
          echo "Binary --version: ${BIN_VER}"
          if [[ "${BIN_VER}" != "${CARGO_VER}" ]]; then
            echo "‚ùå ERROR: Binary version (${BIN_VER}) != Cargo.toml version (${CARGO_VER})"
            exit 1
          fi

      - name: üìù Summary
        run: |
          echo "‚úÖ Version checks passed:"
          echo " - Cargo.toml:       ${{ steps.cargo.outputs.version }}"
          echo " - Debian upstream:  ${{ steps.deb.outputs.upstream }}"
          echo " - Binary --version: $("$PWD/target/release/chd2iso-fuse" --version | awk '{print $2}')"

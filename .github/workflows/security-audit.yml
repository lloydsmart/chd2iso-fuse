name: Security checks 🚫🔍 (cargo-deny & cargo-audit)

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]
  schedule:
    - cron: "30 3 * * 1"
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: sec-checks-${{ github.ref }}
  cancel-in-progress: true

jobs:
  gate:
    name: Decide if checks are needed (PRs) 🧭
    runs-on: ubuntu-latest
    outputs:
      needs_ci: ${{ steps.export.outputs.needs_ci }}
    steps:
      - name: Mode 🔎
        id: mode
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "is_pr=true" >>"$GITHUB_OUTPUT"
          else
            echo "is_pr=false" >>"$GITHUB_OUTPUT"
          fi

      - name: Export for non PR ✅
        if: steps.mode.outputs.is_pr == 'false'
        id: export_nonpr
        run: echo "needs_ci=true" >>"$GITHUB_OUTPUT"

      - name: Identify back merge PR (main -> develop) 🔁
        if: steps.mode.outputs.is_pr == 'true'
        id: bm
        run: |
          if [[ "${{ github.event.pull_request.base.ref }}" == "develop" && \
                "${{ github.event.pull_request.head.ref }}" == "main" ]]; then
            echo "is_backmerge=true" >>"$GITHUB_OUTPUT"
          else
            echo "is_backmerge=false" >>"$GITHUB_OUTPUT"
          fi

      - name: Checkout full only for back merge eval 📥
        if: steps.mode.outputs.is_pr == 'true' && steps.bm.outputs.is_backmerge == 'true'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Compare and conflict probe for back merge PRs 🧪
        if: steps.mode.outputs.is_pr == 'true' && steps.bm.outputs.is_backmerge == 'true'
        id: diff
        run: |
          set -euo pipefail
          git remote set-url origin "${{ github.server_url }}/${{ github.repository }}"
          git fetch --no-tags --prune origin \
            +refs/heads/develop:refs/remotes/origin/develop \
            +refs/heads/main:refs/remotes/origin/main
          read A B < <(git rev-list --left-right --count origin/develop...origin/main)
          echo "ahead_on_develop=${A}" >>"$GITHUB_OUTPUT"
          git checkout -q -B tmp origin/develop
          if git merge --no-commit --no-ff origin/main >/dev/null 2>&1; then
            echo "conflicts=false" >>"$GITHUB_OUTPUT"
            git merge --abort || true
          else
            echo "conflicts=true" >>"$GITHUB_OUTPUT"
            git merge --abort || true
          fi

      - name: Decide PR 🧮
        if: steps.mode.outputs.is_pr == 'true'
        id: export_pr
        run: |
          if [[ "${{ steps.bm.outputs.is_backmerge }}" != "true" ]]; then
            echo "needs_ci=true" >>"$GITHUB_OUTPUT"
            exit 0
          fi
          A="${{ steps.diff.outputs.ahead_on_develop || '0' }}"
          C="${{ steps.diff.outputs.conflicts || 'false' }}"
          if [[ "$C" == "true" || "$A" -gt 0 ]]; then
            echo "needs_ci=true" >>"$GITHUB_OUTPUT"
          else
            echo "needs_ci=false" >>"$GITHUB_OUTPUT"
          fi

      - name: Export final 📤
        id: export
        run: |
          if [[ "${{ steps.mode.outputs.is_pr }}" == "true" ]]; then
            echo "needs_ci=${{ steps.export_pr.outputs.needs_ci }}" >>"$GITHUB_OUTPUT"
          else
            echo "needs_ci=${{ steps.export_nonpr.outputs.needs_ci }}" >>"$GITHUB_OUTPUT"
          fi

  security:
    name: Security checks run 🚫🔍
    needs: gate
    if: |
      !(
        github.event_name == 'pull_request' &&
        (
          (github.base_ref == 'develop' && github.head_ref == 'main') ||
          contains(github.event.pull_request.title, 'Back-merge') ||
          contains(github.event.pull_request.title, 'back-merge') ||
          contains(toJson(github.event.pull_request.labels), 'back-merge')
        )
      )
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      # Optional comma-separated allowlist for cargo-audit suppressions
      ACCEPTED: ${{ vars.RUSTSEC_ACCEPTED_ADVISORIES || secrets.RUSTSEC_ACCEPTED_ADVISORIES || '' }}
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout shallow 📥
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Detect Rust/package changes 🧩
        id: paths
        uses: dorny/paths-filter@v3
        with:
          filters: |
            rust:
              - 'src/**'
              - '**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'build.rs'
              - 'debian/**'

      # Prebuilt binaries — no Rust toolchain needed
      - name: Install cargo-deny 🚫
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny@latest
      - name: cargo-deny version 🧾
        run: cargo-deny --version

      - name: Install cargo-audit 🔍
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit@latest
      - name: cargo-audit version 🧾
        run: cargo audit --version

      # Shared DAILY cache for RustSec advisory DB
      - name: Day key 🗝️
        id: day
        run: echo "day=$(date +%Y-%j)" >> "$GITHUB_OUTPUT"

      - name: Cache RustSec advisory DB 🧰
        uses: actions/cache@v4
        with:
          path: ~/.cargo/advisory-db
          key: rustsec-db-${{ runner.os }}-${{ steps.day.outputs.day }}
          restore-keys: |
            rustsec-db-${{ runner.os }}-

      # ---- cargo-deny ----
      - name: Fetch advisory DB 🔄
        run: cargo-deny fetch

      - name: Check advisories 🚨
        run: cargo-deny --locked check advisories

      - name: Check bans & licenses 📜
        run: cargo-deny --locked check bans licenses

      - name: Export cargo-deny reports 📝
        run: |
          mkdir -p reports
          cargo-deny --format json --locked check advisories > reports/cargo-deny-advisories.json
          cargo-deny --format json --locked check bans       > reports/cargo-deny-bans.json
          cargo-deny --format json --locked check licenses   > reports/cargo-deny-licenses.json

      # ---- cargo-audit ----
      - name: Skip cargo-audit on non-code PRs ⏭️
        if: ${{ steps.paths.outputs.rust != 'true' && github.event_name == 'pull_request' }}
        run: echo "No Rust or package changes in this PR; skipping cargo-audit."

      - name: Ensure Cargo.lock exists 🔐
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        run: |
          set -euo pipefail
          [ -f Cargo.lock ] || cargo generate-lockfile

      - name: Run cargo-audit (JSON) 🔍
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        run: |
          mkdir -p reports
          cargo audit -D warnings --json > reports/cargo-audit.json

      # ---- PR comment summary (only on PRs) ----
      - name: Summarize & comment on PR 📝
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const readJsonSafe = (p) => {
              try {
                if (!fs.existsSync(p)) return {ok:false, data:null};
                const raw = fs.readFileSync(p, 'utf8').trim();
                if (!raw) return {ok:false, data:null};
                return {ok:true, data: JSON.parse(raw)};
              } catch { return {ok:false, data:null}; }
            };

            const countDeny = (file) => {
              const {ok, data} = readJsonSafe(file);
              if (!ok || !Array.isArray(data)) return {errors:0,warnings:0,notes:0, ok:false};
              let e=0,w=0,n=0;
              for (const it of data) {
                const lvl=(it.level||'').toLowerCase();
                if (lvl==='error') e++; else if (lvl==='warning') w++; else if (lvl==='note') n++;
              }
              return {errors:e,warnings:w,notes:n, ok:true};
            };

            const summarizeAudit = (file) => {
              const {ok, data} = readJsonSafe(file);
              if (!ok || !data || !data.vulnerabilities) return {vulns:0,warnings:0, ok:false};
              return {vulns: data.vulnerabilities.count||0, warnings: Array.isArray(data.warnings)?data.warnings.length:0, ok:true};
            };

            const adv = countDeny('reports/cargo-deny-advisories.json');
            const bans = countDeny('reports/cargo-deny-bans.json');
            const lic  = countDeny('reports/cargo-deny-licenses.json');
            const aud  = summarizeAudit('reports/cargo-audit.json');

            const totalErr  = adv.errors + bans.errors + lic.errors;
            const totalWarn = adv.warnings + bans.warnings + lic.warnings;
            const pass = (totalErr === 0 && aud.vulns === 0);
            const ok = (x) => x ? '✅' : '❌';

            // badges
            const esc = encodeURIComponent;
            const badge = (label, msg, color) =>
              'https://img.shields.io/badge/' + esc(label) + '-' + esc(msg) + '-' + esc(color) + '?style=for-the-badge';
            const colorStatus = pass ? 'success' : 'critical';
            const colorDeny   = totalErr > 0 ? 'critical' : (totalWarn > 0 ? 'important' : 'success');
            const colorAudit  = aud.vulns > 0 ? 'critical' : 'success';
            const bStatus = badge('Security', pass ? 'passing' : 'failing', colorStatus);
            const bDeny   = badge('cargo--deny', 'errors:' + totalErr + ' | warn:' + totalWarn, colorDeny);
            const bAudit  = badge('cargo--audit', 'vulns:' + aud.vulns, colorAudit);

            // build table (with emojis)
            const lines = [];
            lines.push('**cargo-deny 🚫**');
            lines.push('| Check         | Errors | Warnings | Notes |');
            lines.push('|---------------|:------:|:--------:|:-----:|');
            lines.push('| advisories 🚨 | ' + adv.errors + ' | ' + adv.warnings + ' | ' + adv.notes + ' |');
            lines.push('| bans ❌        | ' + bans.errors + ' | ' + bans.warnings + ' | ' + bans.notes + ' |');
            lines.push('| licenses 📜    | ' + lic.errors + ' | ' + lic.warnings + ' | ' + lic.notes + ' |');
            lines.push('| **total**     | **' + totalErr + '** | **' + totalWarn + '** | **' + (adv.notes+bans.notes+lic.notes) + '** |');
            lines.push('');
            lines.push('**cargo-audit 🔍**');
            lines.push('- vulnerabilities: **' + aud.vulns + '**');
            lines.push('- warnings ⚠️: **' + aud.warnings + '**');
            if (!adv.ok || !bans.ok || !lic.ok || !aud.ok) {
              lines.push('');
              const missing = [
                !adv.ok ? 'cargo-deny advisories' : null,
                !bans.ok ? 'cargo-deny bans' : null,
                !lic.ok  ? 'cargo-deny licenses' : null,
                !aud.ok  ? 'cargo-audit' : null,
              ].filter(Boolean).join(', ');
              lines.push('_Note: one or more reports were unavailable (' + missing + '); counts shown as 0._');
            }
            lines.push('');
            lines.push('**Status**: ' + ok(pass) + ' (errors: ' + totalErr + ', vulns: ' + aud.vulns + ')');
            const table = lines.join('\n');

            // job summary
            const summaryMd =
              '### Security checks summary\n\n' +
              '![status](' + bStatus + ') ![deny](' + bDeny + ') ![audit](' + bAudit + ')\n\n' +
              table + '\n';
            core.summary.addRaw(summaryMd).write();

            // PR comment (collapsible)
            const marker = '<!-- security-checks-summary -->';
            const commentBody =
              marker + '\n' +
              '<details>\n' +
              '<summary><strong>Security checks</strong> — ' +
              '<img alt="status" src="' + bStatus + '" height="20"> ' +
              '<img alt="cargo-deny" src="' + bDeny + '" height="20"> ' +
              '<img alt="cargo-audit" src="' + bAudit + '" height="20"> (click to expand)</summary>\n\n' +
              table + '\n' +
              '</details>';

            const {owner, repo} = context.repo;
            const issue_number = context.issue.number;
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number, per_page: 100 });
            const existing = comments.find(c => c.user?.type === 'Bot' && typeof c.body === 'string' && c.body.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body: commentBody });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body: commentBody });
            }

      - name: Upload security reports 📦
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/*.json

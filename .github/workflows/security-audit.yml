name: Security checks (cargo-deny & cargo-audit)

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]
  schedule:
    - cron: "30 3 * * 1"
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: sec-checks-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # GATE: PRs only; push/schedule/manual always run
  gate:
    name: Decide if checks are needed (PRs)
    runs-on: ubuntu-latest
    outputs:
      needs_ci: ${{ steps.export.outputs.needs_ci }}
    steps:
      - name: Mode
        id: mode
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "is_pr=true" >>"$GITHUB_OUTPUT"
          else
            echo "is_pr=false" >>"$GITHUB_OUTPUT"
          fi

      - name: Export for non-PR
        if: steps.mode.outputs.is_pr == 'false'
        id: export_nonpr
        run: echo "needs_ci=true" >>"$GITHUB_OUTPUT"

      - name: Identify back-merge PR (main → develop)
        if: steps.mode.outputs.is_pr == 'true'
        id: bm
        run: |
          if [[ "${{ github.event.pull_request.base.ref }}" == "develop" && \
                "${{ github.event.pull_request.head.ref }}" == "main" ]]; then
            echo "is_backmerge=true" >>"$GITHUB_OUTPUT"
          else
            echo "is_backmerge=false" >>"$GITHUB_OUTPUT"
          fi

      - uses: actions/checkout@v5
        if: steps.mode.outputs.is_pr == 'true' && steps.bm.outputs.is_backmerge == 'true'
        with: { fetch-depth: 0 }

      - name: Compare & conflict probe (only for back-merge PRs)
        if: steps.mode.outputs.is_pr == 'true' && steps.bm.outputs.is_backmerge == 'true'
        id: diff
        run: |
          set -euo pipefail
          git remote set-url origin "${{ github.server_url }}/${{ github.repository }}"
          git fetch --no-tags --prune origin \
            +refs/heads/develop:refs/remotes/origin/develop \
            +refs/heads/main:refs/remotes/origin/main
          read A B < <(git rev-list --left-right --count origin/develop...origin/main)
          echo "ahead_on_develop=${A}" >>"$GITHUB_OUTPUT"
          git checkout -q -B tmp origin/develop
          if git merge --no-commit --no-ff origin/main >/dev/null 2>&1; then
            echo "conflicts=false" >>"$GITHUB_OUTPUT"
            git merge --abort || true
          else
            echo "conflicts=true" >>"$GITHUB_OUTPUT"
            git merge --abort || true
          fi

      - name: Decide (PR)
        if: steps.mode.outputs.is_pr == 'true'
        id: export_pr
        run: |
          if [[ "${{ steps.bm.outputs.is_backmerge }}" != "true" ]]; then
            echo "needs_ci=true" >>"$GITHUB_OUTPUT"
            exit 0
          fi
          A="${{ steps.diff.outputs.ahead_on_develop || '0' }}"
          C="${{ steps.diff.outputs.conflicts || 'false' }}"
          if [[ "$C" == "true" || "$A" -gt 0 ]]; then
            echo "needs_ci=true" >>"$GITHUB_OUTPUT"
          else
            echo "needs_ci=false" >>"$GITHUB_OUTPUT"
          fi

      - name: Export final
        id: export
        run: |
          if [[ "${{ steps.mode.outputs.is_pr }}" == "true" ]]; then
            echo "needs_ci=${{ steps.export_pr.outputs.needs_ci }}" >>"$GITHUB_OUTPUT"
          else
            echo "needs_ci=${{ steps.export_nonpr.outputs.needs_ci }}" >>"$GITHUB_OUTPUT"
          fi

  security:
    name: cargo-deny • cargo-audit
    needs: gate
    if: |
      !(
        github.event_name == 'pull_request' &&
        (
          (github.base_ref == 'develop' && github.head_ref == 'main') ||
          contains(github.event.pull_request.title, 'Back-merge') ||
          contains(github.event.pull_request.title, 'back-merge') ||
          contains(toJson(github.event.pull_request.labels), 'back-merge')
        )
      )
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      # Optional comma-separated allowlist for cargo-audit
      # e.g. "RUSTSEC-2021-0154,RUSTSEC-2020-0053"
      ACCEPTED: ${{ vars.RUSTSEC_ACCEPTED_ADVISORIES || secrets.RUSTSEC_ACCEPTED_ADVISORIES || '' }}
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      # Only used to optionally skip cargo-audit on doc-only PRs, etc.
      - name: Determine if Rust/package files changed (for cargo-audit skip)
        id: paths
        uses: dorny/paths-filter@v3
        with:
          filters: |
            rust:
              - 'src/**'
              - '**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'build.rs'
              - 'debian/**'

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

        # Prebuilt, checksummed binaries (fast)
      - name: Install cargo-deny (prebuilt)
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny@latest
      - run: cargo-deny --version

      - name: Install cargo-audit (prebuilt)
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit@latest
      - run: cargo audit --version

      # One shared DAILY cache for the RustSec advisory DB
      - name: Day key
        id: day
        run: echo "day=$(date +%Y-%j)" >> "$GITHUB_OUTPUT"

      - name: Cache RustSec advisory DB
        uses: actions/cache@v4
        with:
          path: ~/.cargo/advisory-db
          key: rustsec-db-${{ runner.os }}-${{ steps.day.outputs.day }}
          restore-keys: |
            rustsec-db-${{ runner.os }}-

      # ---- cargo-deny ----
      - name: Fetch advisory DB (warm-up)
        run: cargo-deny fetch

      - name: Check advisories (enforces per-waiver expiry)
        run: cargo-deny check advisories

      - name: Check bans & licenses (policy hygiene)
        run: cargo-deny check bans licenses

      # ---- cargo-audit ----
      - name: No-op (non-code PR: skip cargo-audit)
        if: ${{ steps.paths.outputs.rust != 'true' && github.event_name == 'pull_request' }}
        run: echo "No Rust/package changes in this PR; skipping cargo-audit."

      - name: Ensure Cargo.lock exists
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        run: |
          set -euo pipefail
          [ -f Cargo.lock ] || cargo generate-lockfile

      - name: Run cargo-audit
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        shell: bash
        run: |
          set -euo pipefail

          args=( -D warnings )

          # Respect user-provided ACCEPTED list (comma-separated).
          if [[ -n "${ACCEPTED}" ]]; then
            IFS=',' read -ra ids <<< "${ACCEPTED}"
            for id in "${ids[@]}"; do
              id_trimmed="$(echo "$id" | xargs)"
              [[ -n "$id_trimmed" ]] && args+=( --ignore "$id_trimmed" )
            done
          fi

          # Ignore long-standing fuser advisory unless already accepted.
          if [[ ",${ACCEPTED}," != *",RUSTSEC-2021-0154,"* ]]; then
            args+=( --ignore RUSTSEC-2021-0154 )
          fi

          cargo audit "${args[@]}"

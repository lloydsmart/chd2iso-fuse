name: CodeQL (Rust)

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]
  schedule:
    - cron: "30 3 * * 1"
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

concurrency:
  group: codeql-${{ github.ref }}
  cancel-in-progress: true

jobs:
  analyze:
    name: "Analyze (CodeQL: ${{ matrix.variant }})"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        variant: [ minimal, default, all-features ]

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Provide an explicit compare range for manual/scheduled runs so paths-filter
      # doesn't fall back to "last commit" (which is often a merge commit with no file list).
      - name: Compute base/ref for paths-filter (manual/scheduled)
        id: range
        if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
        shell: bash
        run: |
          set -euo pipefail
          head_sha="$(git rev-parse HEAD)"
          base_sha="$(git rev-parse HEAD^)"
          echo "base=${base_sha}" >> "$GITHUB_OUTPUT"
          echo "ref=${head_sha}"  >> "$GITHUB_OUTPUT"

      - name: Determine if Rust/package files changed
        id: paths
        uses: dorny/paths-filter@v3
        with:
          # Override only on manual/scheduled runs; empty values are ignored on PR/push.
          base: ${{ steps.range.outputs.base }}
          ref:  ${{ steps.range.outputs.ref }}
          filters: |
            rust:
              - 'src/**'
              - '**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'build.rs'
              - 'debian/**'

      - name: No-op (non-code PR)
        if: ${{ steps.paths.outputs.rust != 'true' && github.event_name == 'pull_request' }}
        run: echo "No Rust/package changes in this PR; skipping heavy CodeQL steps."

      - name: Install system deps
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends pkg-config libfuse3-dev

      - name: Setup Rust
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Initialize CodeQL
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        uses: github/codeql-action/init@v3
        with:
          languages: rust
          queries: +security-and-quality

      # ðŸ”’ Guard: fail early if Cargo.lock is stale (since we build with --locked)
      - name: Ensure Cargo.lock is up to date
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        env:
          CARGO_TERM_COLOR: always
        run: |
          set -euo pipefail
          cargo generate-lockfile
          if ! git diff --quiet -- Cargo.lock; then
            echo "::error file=Cargo.lock::Cargo.lock is out of date. Run 'cargo generate-lockfile' locally and commit the result."
            echo "---- Diff (for visibility) ----"
            git --no-pager diff -- Cargo.lock || true
            exit 1
          fi

      - name: Build (all features & targets)
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        env:
          CARGO_TERM_COLOR: always
        run: |
          set -euo pipefail
          cargo generate-lockfile
          if ! git diff --quiet -- Cargo.lock; then
            echo "::error file=Cargo.lock::Cargo.lock is out of date. Run 'cargo generate-lockfile' locally and commit the result."
            echo "---- Diff (for visibility) ----"
            git --no-pager diff -- Cargo.lock || true
            exit 1
          fi

      - name: Build (${{ matrix.variant }})
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        env:
          CARGO_TERM_COLOR: always
        shell: bash
        run: |
          set -euo pipefail
          cargo fetch --locked
          case "${{ matrix.variant }}" in
            minimal)
              cargo build --locked --all-targets --no-default-features
              ;;
            default)
              cargo build --locked --all-targets
              ;;
            all-features)
              cargo build --locked --all-targets --all-features
              ;;
          esac

      - name: Analyze
        if: ${{ steps.paths.outputs.rust == 'true' || github.event_name != 'pull_request' }}
        uses: github/codeql-action/analyze@v3
        with:
          # Must match base branch categories exactly to avoid "Neutral"
          category: "/language:rust;variant=${{ matrix.variant }}"

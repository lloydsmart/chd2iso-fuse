name: CodeQL (Rust) 🦀🔍

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]
  schedule:
    - cron: "30 3 * * 1"
  workflow_dispatch:

permissions:
  contents: write    # allow autofix step to push 🚀
  security-events: write

concurrency:
  group: codeql-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 🛡️ GATE: decides if CodeQL should run & whether Rust changed
  gate:
    name: 🚦 Gate (decide if CodeQL is needed)
    runs-on: ubuntu-latest
    outputs:
      needs_ci:     ${{ steps.export.outputs.needs_ci }}
      rust_changed: ${{ steps.pathout.outputs.rust_changed }}
    steps:
      - name: 🔎 Mode
        id: mode
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "is_pr=true" >>"$GITHUB_OUTPUT"
          else
            echo "is_pr=false" >>"$GITHUB_OUTPUT"
          fi

      - name: 📤 Export for non-PR
        if: steps.mode.outputs.is_pr == 'false'
        id: export_nonpr
        run: |
          echo "needs_ci=true" >>"$GITHUB_OUTPUT"

      - name: 🔄 Identify back-merge PR
        if: steps.mode.outputs.is_pr == 'true'
        id: bm
        run: |
          if [[ "${{ github.event.pull_request.base.ref }}" == "develop" && \
                "${{ github.event.pull_request.head.ref }}" == "main" ]]; then
            echo "is_backmerge=true" >>"$GITHUB_OUTPUT"
          else
            echo "is_backmerge=false" >>"$GITHUB_OUTPUT"
          fi

      - name: 📥 Checkout (for diff & change detection)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🧪 Compare & probe (back-merge PRs)
        if: steps.mode.outputs.is_pr == 'true' && steps.bm.outputs.is_backmerge == 'true'
        id: diff
        run: |
          set -euo pipefail
          git remote set-url origin "${{ github.server_url }}/${{ github.repository }}"
          git fetch --no-tags --prune origin \
            +refs/heads/develop:refs/remotes/origin/develop \
            +refs/heads/main:refs/remotes/origin/main
          read A B < <(git rev-list --left-right --count origin/develop...origin/main)
          echo "ahead_on_develop=${A}" >>"$GITHUB_OUTPUT"
          git checkout -q -B tmp origin/develop
          if git merge --no-commit --no-ff origin/main >/dev/null 2>&1; then
            echo "conflicts=false" >>"$GITHUB_OUTPUT"
            git merge --abort || true
          else
            echo "conflicts=true" >>"$GITHUB_OUTPUT"
            git merge --abort || true
          fi

      - name: 🤔 Decide (PR)
        if: steps.mode.outputs.is_pr == 'true'
        id: export_pr
        run: |
          if [[ "${{ steps.bm.outputs.is_backmerge }}" != "true" ]]; then
            echo "needs_ci=true" >>"$GITHUB_OUTPUT"
            exit 0
          fi
          A="${{ steps.diff.outputs.ahead_on_develop || '0' }}"
          C="${{ steps.diff.outputs.conflicts || 'false' }}"
          if [[ "$C" == "true" || "$A" -gt 0 ]]; then
            echo "needs_ci=true" >>"$GITHUB_OUTPUT"
          else
            echo "needs_ci=false" >>"$GITHUB_OUTPUT"
          fi

      - name: 📤 Export final
        id: export
        run: |
          if [[ "${{ steps.mode.outputs.is_pr }}" == "true" ]]; then
            echo "needs_ci=${{ steps.export_pr.outputs.needs_ci }}" >>"$GITHUB_OUTPUT"
          else
            echo "needs_ci=${{ steps.export_nonpr.outputs.needs_ci }}" >>"$GITHUB_OUTPUT"
          fi

      - name: 🧮 Compute base/ref for paths-filter (schedule/dispatch)
        id: range
        if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
        shell: bash
        run: |
          set -euo pipefail
          head_sha="$(git rev-parse HEAD)"
          base_sha="$(git rev-parse HEAD^)"
          echo "base=${base_sha}" >> "$GITHUB_OUTPUT"
          echo "ref=${head_sha}"  >> "$GITHUB_OUTPUT"

      - name: 🦀📦 Determine if Rust/package files changed
        id: paths
        uses: dorny/paths-filter@v3
        with:
          base: ${{ steps.range.outputs.base }}
          ref:  ${{ steps.range.outputs.ref }}
          filters: |
            rust:
              - 'src/**'
              - '**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'build.rs'
              - 'debian/**'

      - name: 📤 Export rust_changed
        id: pathout
        run: |
          echo "rust_changed=${{ steps.paths.outputs.rust || 'false' }}" >>"$GITHUB_OUTPUT"

  analyze:
    name: "🧩 Analyze (CodeQL: ${{ matrix.variant }})"
    needs: gate
    if: needs.gate.outputs.needs_ci == 'true' && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || needs.gate.outputs.rust_changed == 'true')
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        # PRs: just "default" | schedule/dispatch: all 3
        variant: ${{ fromJSON(github.event_name == 'pull_request' && '["default"]' || '["minimal","default","all-features"]') }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🛠️ Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends pkg-config libfuse3-dev

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: 🔒✨ Autofix Cargo.lock (same-repo PRs)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        run: |
          set -euo pipefail
          cargo update -w
          if ! git diff --quiet -- Cargo.lock; then
            echo "🔧 Cargo.lock updated — committing fix..."
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add Cargo.lock
            git commit -m "chore(lockfile): update Cargo.lock to latest compatible [skip ci]"
            git push
          else
            echo "✅ Cargo.lock already up to date."
          fi

      - name: 🚨 Check Cargo.lock (fork PRs)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository
        run: |
          set -euo pipefail
          cargo update -w
          if ! git diff --quiet -- Cargo.lock; then
            echo "::error file=Cargo.lock,title=Lockfile out of date::This PR comes from a fork, so CI cannot push fixes. Please run 'cargo update -w' locally and commit the updated Cargo.lock."
            git --no-pager diff -- Cargo.lock | sed -n '1,200p' || true
            exit 1
          else
            echo "✅ Cargo.lock up to date."
          fi

      # 🔧 IMPORTANT: Manual, traced build for Rust so CodeQL sees proc-macros, build.rs, etc.
      - name: 🧹 Disable rustc wrappers/caches (ensure tracer sees rustc)
        run: |
          echo "RUSTC_WRAPPER=" >> "$GITHUB_ENV"
          echo "SCCACHE_BUCKET=" >> "$GITHUB_ENV"
          echo "SCCACHE_ENDPOINT=" >> "$GITHUB_ENV"
          echo "CARGO_INCREMENTAL=0" >> "$GITHUB_ENV"

      - name: 🧰 Initialize CodeQL (manual build mode)
        uses: github/codeql-action/init@v3
        with:
          languages: rust
          build-mode: manual
          queries: +security-and-quality

      - name: 🏗️ Build (${{ matrix.variant }})
        env:
          CARGO_TERM_COLOR: always
        shell: bash
        run: |
          set -euo pipefail
          # Ensure deps resolve (fallback if lockfile missing)
          if [ -f Cargo.lock ]; then
            cargo fetch --locked || cargo fetch
          else
            cargo generate-lockfile
            cargo fetch
          fi

          case "${{ matrix.variant }}" in
            minimal)
              cargo build --workspace --all-targets --no-default-features --locked || cargo build --workspace --all-targets --no-default-features
              ;;
            default)
              cargo build --workspace --all-targets --locked || cargo build --workspace --all-targets
              ;;
            all-features)
              cargo build --workspace --all-targets --all-features --locked || cargo build --workspace --all-targets --all-features
              ;;
          esac

      - name: 🔬 Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:rust;variant=${{ matrix.variant }}"

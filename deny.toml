# cargo-deny policy
# Docs: https://embarkstudios.github.io/cargo-deny/

########################################
# Advisories
########################################
[advisories]
# Use upstream RustSec DB
db-urls = ["https://github.com/RustSec/advisory-db"]

# Ignore specific advisories (optional). You can give an id or a crate spec.
# No 'until' field in current schema; time-box in process (issue, reminders, CI) instead.
ignore = [
  { id = "RUSTSEC-2021-0154", reason = "fuser has no fixed release; project does not process untrusted inputs" },
]

# How to treat 'unmaintained' advisories (scope, not warn/deny):
#   all | workspace | transitive | none
unmaintained = "workspace"

# Yanked crate handling (level):
#   deny | warn | allow
yanked = "warn"

# If you prefer git CLI for DB fetches (instead of gix), uncomment:
# git-fetch-with-cli = true

########################################
# Licenses
########################################
[licenses]
# Allowed SPDX identifiers; anything else is denied by default.
allow = [
  "Apache-2.0",
  "MIT",
  "BSD-2-Clause",
  "BSD-3-Clause",
  "ISC",
  "Unicode-DFS-2016",
  "Zlib",
]

# Confidence for text -> SPDX inference
confidence-threshold = 0.8

# Example of targeted exceptions (optional)
# [[licenses.exceptions]]
# crate = "some-crate"
# allow = ["MPL-2.0"]

########################################
# Bans (optional hygiene)
########################################
[bans]
multiple-versions = "warn"
wildcards = "deny"
# deny = ["some-bad-crate"]                   # optional
# skip = [{ crate = "x@1.2.3", reason = "â€¦" }] # optional
